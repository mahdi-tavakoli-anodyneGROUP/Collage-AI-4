# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iHEMYAKjbFBFbuSi4BFZ1eOUw92L5fn2
"""

import locale
def getpreferredencoding(do_setlocale=True):
    return "UTF-8"
locale.getpreferredencoding = getpreferredencoding
!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="BhJ63IemG3ACRXXxUyzC")
project = rf.workspace("dental-decay").project("check-hfbzl-zemwx")
version = project.version(12)
dataset = version.download("yolov8")

import locale
def getpreferredencoding(do_setlocale=True):
    return "UTF-8"
locale.getpreferredencoding = getpreferredencoding
!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="BhJ63IemG3ACRXXxUyzC")
project = rf.workspace("dental-decay").project("check-hfbzl-zemwx")
version = project.version(12)
dataset = version.download("yolov8")

import os
import yaml
import cv2
import numpy as np
! pip install ultralytics
from ultralytics import YOLO

train_params = {
    "epochs": 15,
    'imgsz': 640,
    'batch': 16,
    'workers': 2,
    'device': 'cuda',
    'cls':1.0, #vazn class
    'patience':100,
    'optimizer': 'Adam',
    'lr0': 0.01,
}

def preprocess_image(image_path):
    #tasvir khondam
    image = cv2.imread(image_path)
    #vojod tasvir
    if image is None:
        print(f"Error: Could not load image {image_path}")
        return None
    #labe tiz kardam
    kernel = np.array([[-1,-1,-1], [-1,9,-1], [-1,-1,-1]])
    #filter tiz labe be tasvir dadam
    sharpened = cv2.filter2D(image, -1, kernel)
    #tashkhis labe
    edges = cv2.Canny(sharpened , 100 , 200)
    return edges

#masir tasvir
dataset_path = "/content/CHECK-12"
output_path = "/content/CHECK-12/train/images"
#zakhire khorogi
if not os.path.exists(output_path):
    os.makedirs(output_path)

# pardazesh tasvir
for filename in os.listdir(dataset_path):
    image_path = os.path.join(dataset_path, filename)
    if os.path.isfile(image_path) and (filename.endswith('.png') or filename.endswith('.jpg') or filename.endswith('.jpeg')):
        processed_image = preprocess_image(image_path)
        if processed_image is not None:
            cv2.imwrite(os.path.join(output_path, filename), processed_image)
#yaml
data_yaml_path = os.path.join(dataset_path, '/content/CHECK-12/data.yaml')

#moshakhas kardan masir train , val , test
with open(data_yaml_path, 'r') as f:
    data = yaml.safe_load(f)
data['train'] = '/content/CHECK-12/train/images'
data['val'] = '/content/CHECK-12/valid/images'
data['test'] = '/content/CHECK-12/test/images'

with open(data_yaml_path, 'w') as f:
    yaml.safe_dump(data, f)

# train kardan
# model = YOLO('yolov8n.pt')
model=YOLO('/content/runs/segment/train2/weights/best.pt')
try:
    model.train(data=data_yaml_path, **train_params)
except Exception as e:
    print(f"Training error: {e}")
